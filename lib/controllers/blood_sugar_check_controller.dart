import 'package:flutter/material.dart';
import 'package:get/get.dart';
import 'package:diabetes_meal_management_application_project/controllers/blood_sugar_controller.dart';

class BloodSugarCheckController extends GetxController {
  final BloodSugarController bloodSugarController =
      Get.find<BloodSugarController>();

  // ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ bloodSugar ‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
  var bloodSugarList = <Map<String, dynamic>>[].obs;

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡πÉ‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏î
void checkBloodSugarLevel() {
  final bloodSugarLevel = bloodSugarController.bloodSugar.value;
  final timestamp = DateTime.now(); // Capture the current time
  print("üòà Checking blood sugar level: $bloodSugarLevel mg/dL");

  if ((bloodSugarLevel < 70 || bloodSugarLevel > 180)) {
    triggerOutOfRangeNotification(bloodSugarLevel, timestamp);
    logNotification(bloodSugarLevel);
    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
    bloodSugarList.add({
      'level': bloodSugarLevel,
      'timestamp': timestamp, // ‡πÄ‡∏Å‡πá‡∏ö timestamp ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à
    });
  }
}

  // Getter ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö timestamp
  DateTime get timestamp {
    return DateTime.now();
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥
  void triggerOutOfRangeNotification(double bloodSugarLevel, DateTime timestamp) {
    String fontFamily = 'NotoSansThai';
    List<String> recommend = [];

    String checkBloodSugarLeveltoString() {
      // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á
      recommend.clear();

      if (bloodSugarLevel < 50) {
        recommend
            .add("‡∏£‡∏µ‡∏ö‡∏ó‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏≤‡∏£‡πå‡πÇ‡∏ö‡πÑ‡∏Æ‡πÄ‡∏î‡∏£‡∏ï ‡πÄ‡∏ä‡πà‡∏ô ‡∏ô‡πâ‡∏≥‡∏ú‡∏•‡πÑ‡∏°‡πâ ‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡∏ô‡∏°‡∏õ‡∏±‡∏á");
        return '‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏≠‡∏±‡∏ô‡∏ï‡∏£‡∏≤‡∏¢!';
      } else if (bloodSugarLevel < 70) {
        recommend
            .add("‡∏£‡∏µ‡∏ö‡∏ó‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏≤‡∏£‡πå‡πÇ‡∏ö‡πÑ‡∏Æ‡πÄ‡∏î‡∏£‡∏ï ‡πÄ‡∏ä‡πà‡∏ô ‡∏ô‡πâ‡∏≥‡∏ú‡∏•‡πÑ‡∏°‡πâ ‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡∏ô‡∏°‡∏õ‡∏±‡∏á");
        return '‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡πÉ‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤‡∏õ‡∏Å‡∏ï‡∏¥!';
      } else if (bloodSugarLevel >= 70 && bloodSugarLevel <= 100) {
        return '‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡πÉ‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏õ‡∏Å‡∏ï‡∏¥';
      } else if (bloodSugarLevel > 100 && bloodSugarLevel <= 180) {
        return '‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡πÉ‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏õ‡∏Å‡∏ï‡∏¥';
      } else if (bloodSugarLevel > 180 && bloodSugarLevel <= 300) {
        recommend.add("‡∏î‡∏∑‡πà‡∏°‡∏ô‡πâ‡∏≥‡πÄ‡∏õ‡∏•‡πà‡∏≤‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô");
        recommend.add("‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢‡πÄ‡∏ö‡∏≤ ‡πÜ");
        recommend.add("‡∏ï‡∏£‡∏ß‡∏à‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ó‡∏≤‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ");
        return '‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏™‡∏π‡∏á‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ!';
      } else {
        recommend.add("‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÅ‡∏û‡∏ó‡∏¢‡πå‡∏ó‡∏±‡∏ô‡∏ó‡∏µ");
        recommend.add("‡πÑ‡∏õ‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥");
        return '‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏≠‡∏±‡∏ô‡∏ï‡∏£‡∏≤‡∏¢!';
      }
    }

    print("‚ùó ‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡πÉ‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡πÄ‡∏Å‡∏¥‡∏ô‡∏Ç‡∏µ‡∏î‡∏à‡∏≥‡∏Å‡∏±‡∏î: $bloodSugarLevel mg/dL");
    Get.snackbar(
      "",
      "",
      snackPosition: SnackPosition.TOP,
      backgroundColor: Colors.white,
      colorText: Colors.red,
      borderRadius: 10,
      margin: EdgeInsets.all(10),
      duration: Duration(seconds: 10), // ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á snackbar
      isDismissible: true, // ‡∏õ‡∏¥‡∏î‡πÑ‡∏î‡πâ‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏≤‡∏£ swipe
      forwardAnimationCurve: Curves.easeOutBack, // Animation ‡∏ï‡∏≠‡∏ô‡πÅ‡∏™‡∏î‡∏á
      reverseAnimationCurve: Curves.easeInBack,
      boxShadows: [
        BoxShadow(
          color: Colors.black.withOpacity(0.3), // ‡∏™‡∏µ‡πÄ‡∏á‡∏≤
          spreadRadius: 2, // ‡∏Ç‡∏ô‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡πÄ‡∏á‡∏≤
          blurRadius: 10, // ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ö‡∏•‡∏≠‡∏Ç‡∏≠‡∏á‡πÄ‡∏á‡∏≤
          offset: Offset(4, 4), // ‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏á‡∏≤ (X, Y)
        ),
      ],
      titleText: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            checkBloodSugarLeveltoString(), // ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° Title
            style: TextStyle(
              fontSize: 18, // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà‡∏Ç‡∏∂‡πâ‡∏ô
              fontWeight: FontWeight.bold, // ‡∏ï‡∏±‡∏ß‡∏´‡∏ô‡∏≤
              fontFamily: 'NotoSansThai',
              color: Colors.black, // ‡∏™‡∏µ‡∏Ç‡∏≠‡∏á Title
            ),
          ),
          Divider(
            color: Color.fromRGBO(255, 51, 0, 1),
            indent: 2,
            endIndent: 2,
          ),
        ],
      ),
      messageText: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              Image.asset("asset/im/blood_red.png"),
              SizedBox(
                width: 14,
              ),
              Text(
                "‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡∏Ñ‡∏∑‡∏≠", // ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
                style: TextStyle(
                  fontSize: 14, // ‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏•‡πá‡∏Å‡∏Å‡∏ß‡πà‡∏≤ Title
                  fontFamily: 'NotoSansThai',
                  color: Colors.black, // ‡∏™‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏Å‡∏ï‡∏¥
                ),
              ),
              SizedBox(
                width: 6,
              ),
              Text(
                "$bloodSugarLevel", // ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
                style: TextStyle(
                  fontSize: 16, // ‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏•‡πá‡∏Å‡∏Å‡∏ß‡πà‡∏≤ Title
                  fontFamily: 'NotoSansThai',
                  color: Colors.red, // ‡∏™‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏Å‡∏ï‡∏¥
                ),
              ),
              SizedBox(
                width: 6,
              ),
              Text("‡∏°‡∏¥‡∏•‡∏•‡∏¥‡∏Å‡∏£‡∏±‡∏°/‡πÄ‡∏î‡∏ã‡∏¥‡∏•‡∏¥‡∏ï‡∏£", // ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
                  style: TextStyle(
                    fontSize: 14, // ‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏•‡πá‡∏Å‡∏Å‡∏ß‡πà‡∏≤ Title
                    fontFamily: 'NotoSansThai',
                    color: Colors.black, // ‡∏™‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏Å‡∏ï‡∏¥
                  ))
            ],
          ),
          checkBloodSugarLeveltoString() != '‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡πÉ‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏õ‡∏Å‡∏ï‡∏¥'
              ? SizedBox(
                  height: 16,
                )
              : SizedBox.shrink(),
          checkBloodSugarLeveltoString() != '‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡πÉ‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏õ‡∏Å‡∏ï‡∏¥'
              ? Row(
                  children: [
                    Text("‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥",
                        style: TextStyle(
                          fontSize: 16, fontWeight: FontWeight.w600,
                          fontFamily: 'NotoSansThai',
                          decoration:
                              TextDecoration.underline, // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏™‡πâ‡∏ô‡πÉ‡∏ï‡πâ
                          decorationColor: Colors.black, // üî¥ ‡∏™‡∏µ‡∏Ç‡∏≠‡∏á‡πÄ‡∏™‡πâ‡∏ô‡πÉ‡∏ï‡πâ
                          decorationThickness: 1,
                        )) // üìè ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏ô‡∏≤‡∏Ç‡∏≠‡∏á‡πÄ‡∏™‡πâ‡∏ô‡πÉ‡∏ï‡πâ),)
                  ],
                )
              : SizedBox.shrink(),
          checkBloodSugarLeveltoString() != '‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡πÉ‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏õ‡∏Å‡∏ï‡∏¥'
              ? SizedBox(
                  height: 10,
                )
              : SizedBox.shrink(),
          checkBloodSugarLeveltoString() != '‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡πÉ‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏õ‡∏Å‡∏ï‡∏¥'
              ? Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: recommend.map((item) {
                    return Text(
                      "   \u2022 $item", // \u2022 ‡∏Ñ‡∏∑‡∏≠ Unicode ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏∏‡∏î‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠
                      style: TextStyle(
                        fontSize: 14,
                        fontWeight: FontWeight.w400,
                        fontFamily: 'NotoSansThai',
                      ),
                    );
                  }).toList(),
                )
              : SizedBox.shrink()
        ],
      ), // ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏ô‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ç‡∏≠‡∏ö // Animation ‡∏ï‡∏≠‡∏ô‡∏ã‡πà‡∏≠‡∏ô
    );
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
  void logNotification(double bloodSugarLevel) {
    print(
        "üìù ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡πÄ‡∏Å‡∏¥‡∏ô‡∏Ç‡∏µ‡∏î‡∏à‡∏≥‡∏Å‡∏±‡∏î: $bloodSugarLevel mg/dL");
  }
}
